#!/usr/bin/python3 -B

import ANSI
import argparse
import fnmatch
import os.path
import platform
import subprocess
import sys

import image_download

cachedir = os.getenv('XDG_CACHE_HOME') or os.path.expanduser('~/.cache')
cockpit_cache = os.path.join(cachedir, 'cockpit-images')
cimg_cache = os.path.join(cachedir, 'cimg')
gitdir = os.path.join(cimg_cache, 'bots.git')

try:
    import argcomplete
except ImportError:
    argcomplete = None

def cat_file(obj):
    return subprocess.check_output(['git', '--git-dir', gitdir, 'cat-file', '-p', obj], encoding='utf-8')

cimg_commands = {}
def cimg_command(description):
    def register(func):
        assert func.__name__.startswith('cmd_')
        name = func.__name__[4:]
        cimg_commands[name] = (description, func)
        return func
    return register

class Image:
    def __init__(self, name, filename, fingerprint, exists):
        self.name = name
        self.filename = filename
        self.fingerprint = fingerprint
        self.exists = exists

class ImageDirectory:
    def __init__(self):
        self.images = None

    def get_images(self):
        if self.images is None:
            self.images = {}

            files = set()

            for line in cat_file('HEAD:images').splitlines():
                objinfo, name = line.split('\t')
                objmode, objtype, objhash = objinfo.split(' ')

                if objtype == 'blob' and objmode == '120000':
                    dest = cat_file(objhash)
                    if dest.startswith(name + '-') and dest.endswith('.qcow2'):
                        fingerprint = dest[len(name) + 1:-6]
                        assert len(fingerprint) == 64
                        filename = os.path.join(cockpit_cache, dest)
                        exists = os.path.exists(filename)
                        self.images[name] = Image(name, filename, fingerprint, exists)

        return self.images

    def glob(self, pattern):
        images = self.get_images()

        return {name:images[name] for name in fnmatch.filter(images, pattern)}

class ImagesList:
    def __init__(self, patterns):
        imgdict = ImageDirectory().get_images()
        imglist = []

        if patterns:
            for pattern in patterns:
                results = fnmatch.filter(imgdict, pattern)
                if not results:
                    print('No matching images:', pattern, file=sys.stderr)
                imglist.extend(sorted(results))
            explicit = True
        else:
            imglist.extend(sorted(imgdict))
            explicit = False

        self.imglist = imglist
        self.imgdict = {k:imgdict[k] for k in imgdict if k in imglist}
        self.explicit = explicit

        assert all(image in self.imgdict for image in self.imglist)
        assert all(image in self.imglist for image in self.imgdict)

    def __getitem__(self, name):
        return self.imgdict[name]

    def __iter__(self):
        return self.imglist.__iter__()

    def keys(self):
        return list(self.imglist)

    def items(self):
        return ((name, self.imgdict[name]) for name in self.imglist)

    def values(self):
        return (self.imgdict[name] for name in self.imglist)

class ImagesAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        imglist = ImagesList(values)
        setattr(namespace, self.dest, imglist)

    def completion(self, prefix, parsed_args):
        return ImageDirectory().get_images()

def images_completer(prefix, action, parsed_args):
    if hasattr(action, 'completion'):
        return action.completion(prefix, parsed_args)
    return []

@cimg_command('Show image status')
def cmd_status(args, parser):
    if parser and not args:
        group = parser.add_mutually_exclusive_group()
        group.add_argument('--short', action='store_true', help='Show summary output')
        group.add_argument('--long', action='store_true', help='Show detailed output')
        parser.add_argument('image', nargs='*', action=ImagesAction)
        return

    if args.long or args.short:
        detail = args.long
    else:
        detail = args.image.explicit

    for image in args.image.values():
        color = image.exists and ANSI.cyan or ANSI.red
        print(('  {}{}' + ANSI.dark + '-{}.qcow2' + ANSI.reset).format(color, image.name, image.fingerprint))


@cimg_command('Download one or more images')
def cmd_download(args, parser):
    if parser and not args:
        parser.add_argument('image', nargs='*', action=ImagesAction)
        return

    for image in args.image.values():
        if not image.exists:
            image_download.get_image(image.filename)

@cimg_command('Update bots repository')
def cmd_update(args, parser):
    if parser and not args:
        return

    subprocess.check_call(['git', '--git-dir', gitdir, 'fetch'])

@cimg_command('Initialise cimg (ie: clone the bots repository)')
def cmd_init(args, parser):
    if parser and not args:
        return

    repository = 'https://github.com/cockpit-project/bots.git'
    subprocess.check_call(['git', 'clone', '--bare', '--depth=1', repository, gitdir])

def main():
    parser = argparse.ArgumentParser(description='Manage cockpit bots images',
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    subparsers = parser.add_subparsers()
    for name in cimg_commands:
        description, func = cimg_commands[name]
        subparser = subparsers.add_parser(name, description=description)
        subparser.set_defaults(command=name)
        subparser.set_defaults(func=func)
        func(None, subparser)

    if argcomplete:
        argcomplete.autocomplete(parser, default_completer=images_completer)

    args = parser.parse_args()

    if 'func' not in args:
        args.func = cmd_status
        args.image = ImagesList([])
        args.long = False
        args.short = True

    args.func(args, None)

    return 0

if __name__ == '__main__':
    sys.exit(main())

